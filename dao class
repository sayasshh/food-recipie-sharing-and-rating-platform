RecipeDAO Class
Below is an example implementation of a RecipeDAO class that handles CRUD operations for the Recipes table.

java

Verify

Open In Editor
Edit
Copy code
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class RecipeDAO {

    // Method to create a new recipe
    public void createRecipe(Recipe recipe) {
        String sql = "INSERT INTO Recipes (user_id, title, description, ingredients, instructions, cooking_time, cuisine, image_url, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection connection = DatabaseUtility.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
             
            preparedStatement.setInt(1, recipe.getUser Id());
            preparedStatement.setString(2, recipe.getTitle());
            preparedStatement.setString(3, recipe.getDescription());
            preparedStatement.setString(4, recipe.getIngredients());
            preparedStatement.setString(5, recipe.getInstructions());
            preparedStatement.setInt(6, recipe.getCookingTime());
            preparedStatement.setString(7, recipe.getCuisine());
            preparedStatement.setString(8, recipe.getImageUrl());
            preparedStatement.setInt(9, recipe.getCategoryId());
            preparedStatement.executeUpdate();
            System.out.println("Recipe created successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to retrieve a recipe by ID
    public Recipe getRecipeById(int recipeId) {
        Recipe recipe = null;
        String sql = "SELECT * FROM Recipes WHERE recipe_id = ?";
        try (Connection connection = DatabaseUtility.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
             
            preparedStatement.setInt(1, recipeId);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                recipe = new Recipe();
                recipe.setRecipeId(resultSet.getInt("recipe_id"));
                recipe.setUser Id(resultSet.getInt("user_id"));
                recipe.setTitle(resultSet.getString("title"));
                recipe.setDescription(resultSet.getString("description"));
                recipe.setIngredients(resultSet.getString("ingredients"));
                recipe.setInstructions(resultSet.getString("instructions"));
                recipe.setCookingTime(resultSet.getInt("cooking_time"));
                recipe.setCuisine(resultSet.getString("cuisine"));
                recipe.setImageUrl(resultSet.getString("image_url"));
                recipe.setCategoryId(resultSet.getInt("category_id"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return recipe;
    }

    // Method to retrieve all recipes
    public List<Recipe> getAllRecipes() {
        List<Recipe> recipes = new ArrayList<>();
        String sql = "SELECT * FROM Recipes";
        try (Connection connection = DatabaseUtility.getConnection();
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {
             
            while (resultSet.next()) {
                Recipe recipe = new Recipe();
                recipe.setRecipeId(resultSet.getInt("recipe_id"));
                recipe.setUser Id(resultSet.getInt("user_id"));
                recipe.setTitle(resultSet.getString("title"));
                recipe.setDescription(resultSet.getString("description"));
                recipe.setIngredients(resultSet.getString("ingredients"));
                recipe.setInstructions(resultSet.getString("instructions"));
                recipe.setCookingTime(resultSet.getInt("cooking_time"));
                recipe.setCuisine(resultSet.getString("cuisine"));
                recipe.setImageUrl(resultSet.getString("image_url"));
                recipe.setCategoryId(resultSet.getInt("category_id"));
                recipes.add(recipe);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return recipes;
    }

    // Method to update a recipe
    public void updateRecipe(Recipe recipe) {
        String sql = "UPDATE Recipes SET title = ?, description = ?, ingredients = ?, instructions = ?, cooking_time = ?, cuisine = ?, image_url = ?, category_id = ? WHERE recipe_id = ?";
        try (Connection connection = DatabaseUtility.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
             
            preparedStatement.setString(1, recipe.getTitle());
            preparedStatement.setString(2, recipe.getDescription());
            preparedStatement.setString(3, recipe.getIngredients());
            preparedStatement.setString(4, recipe.getInstructions());
            preparedStatement.setInt(5, recipe.getCookingTime());
            preparedStatement.setString(6, recipe.getCuisine());
            preparedStatement.setString(7, recipe.getImageUrl());
            preparedStatement.setInt(8, recipe.getCategoryId());
            preparedStatement.setInt
